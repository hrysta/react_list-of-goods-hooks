{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","SORT_FIELD_NAME","localeCompare","SORT_FIELD_LENGTH","length","reverse","getPreparedGoods","className","type","onClick","SORT_FIELD_RESET","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,2BAAAA,E,yBAAAA,E,YAAAA,M,KAoCE,IAAME,EAAe,WAC1B,MAAkCC,mBAAoBH,EAAUI,SAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAAUe,gBACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,kBACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAOcS,CAAiBnB,EAAiBI,EAAWE,GAElE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWhB,IAAcL,EAAUe,gBAC/B,iBACA,0BACJQ,QAAS,kBAAMjB,EAAaN,EAAUe,kBALxC,iCAUA,wBACEO,KAAK,SACLD,UAAWhB,IAAcL,EAAUiB,kBAC/B,oBACA,6BACJM,QAAS,kBAAMjB,EAAaN,EAAUiB,oBALxC,4BAUA,wBACEK,KAAK,SACLD,UAAWd,EACP,oBACA,6BACJgB,QAAS,kBAAMf,GAAeD,IALhC,sBAUEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAWhB,IAAcL,EAAUwB,iBAC/B,mBACA,4BACJD,QAAS,WACPjB,EAAaN,EAAUI,SACvBI,GAAc,IAPlB,sBAcJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,aC5GbC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cc0f0d19.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  SORT_FIELD_NAME = 'name',\n  SORT_FIELD_LENGTH = 'length',\n  SORT_FIELD_RESET = 'reset',\n  DEFAULT = '',\n}\n\nfunction getPreparedGoods(\n  goods:string[],\n  sortField:SortField,\n  isReversed:boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        case SortField.SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App:React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === SortField.SORT_FIELD_NAME\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => setSortField(SortField.SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortField === SortField.SORT_FIELD_LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => setSortField(SortField.SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className={sortField === SortField.SORT_FIELD_RESET\n              ? 'button is-danger'\n              : 'button is-danger is-light'}\n            onClick={() => {\n              setSortField(SortField.DEFAULT);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}